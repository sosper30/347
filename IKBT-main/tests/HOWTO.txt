Testing IKBT

There are several ways to test the IKBT funcionality as a whole, and also unit tests of each piece.   

Unit tests:

To test all the leaves (solvers), (from this directory):

> cd ..  << you need to be in the project directory currently called IKBT, not /tests >>
> python -m tests.leavestest

<< Note: use '.' between tests and leavestest (not slash!)  also, be sure to omit '.py' >>

to test the "helperfunctions":

> cd ..
> python -m tests.helpertest

HTML test report output:

"leavestest" can generate a nice HTML summary of the results using the package HTMLTestRunner.py by Wai Yip Tung.  
(http://tungwaiyip.info/software/HTMLTestRunner.html)

to generate an html test report:


> cd .. 
> python -m tests.leavestest html

then open a new tab in your browser, hit <ctl>-O, and navigate to the project page and open the file "IK-BT_testreport.html".
(if nesc, customize projdir = '<dir>' in your leavestest.py file to place the file in the right place.)


Testing an individual leaf. 

If you are having trouble with a particular solver ("leaf"), you can test it individually:

> cd ..
> python -m ikbtleaves.sincos_solver  

(for the case of sincos solver for example). 
<< Note: use '.' between tests and leavestest (not slash!)  also, be sure to omit '.py' >>


Testing ik_classes.py
  This file has not been integrated with unittest yet.  To test: 
  
> cd ..
> python -m ikbtbasics.ik_classes

**  Testing system for ikbt leaves

Overall, testing is mostly integrated into the unittest python module's framework. 
A test method should be defined in each leaf file.  
The testing process usually involves setting up a 2-leaf BT whos root is a sequence node.  
The first leaf is a special testing-only node which sets up the environment
(chiefly blackboard information) for testing the second leaf.   
The second leaf is the leaf under test. 

This tree is ticked to perform the test and then outputs are checked with assertions in 
__main__().






